buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.5'
        classpath "com.gradle.publish:plugin-publish-plugin:0.9.5"
    }
}

plugins {
    id 'net.researchgate.release' version '2.4.0'
}

group 'cz.alenkacz.gradle'
version = version == 'unspecified' ? 'DEVELOPER-SNAPSHOT' : version

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: "com.gradle.plugin-publish"

repositories {
    jcenter()
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

task wrapper(type: Wrapper) {
    gradleVersion = "3.3"
}

dependencies {
    compile gradleApi()
    compile 'org.codehaus.groovy:groovy-all:2.4.7'
    compile group: "org.everit.json", name: "org.everit.json.schema", version: "1.1.1"
    compile 'com.github.fge:json-schema-validator:2.2.6'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile gradleTestKit()
    testCompile ('org.spockframework:spock-core:1.0-groovy-2.4') {
        exclude group:'org.codehaus.groovy'
    }
}

// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}

// Add the classpath file to the test runtime classpath
dependencies {
    testRuntime files(createClasspathManifest)
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    configurations = ['archives']
    publish = true
    pkg {
        repo = 'maven'
        name = 'gradle-json-validator'
        desc = 'Gradle plugin that with a task that is capable of json validation during a Gradle build. Json schema is used for that.'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/alenkacz/gradle-json-validator.git'
        websiteUrl = 'https://github.com/alenkacz/gradle-json-validator'
        issueTrackerUrl = 'https://github.com/alenkacz/gradle-json-validator/issues'
        labels = ['json', 'validation', 'schema', 'json schema', 'gradle']
        version {
            name = project.version
            vcsTag = project.version
        }
    }
}

project.ext.set('gradle.publish.key', System.getenv('GRADLE_PORTAL_KEY'))
project.ext.set('gradle.publish.secret', System.getenv('GRADLE_PORTAL_SECRET'))
pluginBundle {
    website = 'https://github.com/alenkacz/gradle-json-validator'
    vcsUrl = 'https://github.com/alenkacz/gradle-json-validator'
    description = 'Gradle plugin for json validation (json schema)'
    tags = ['json', 'schema', 'validation']

    plugins {
        jsonValidatorPlugin {
            id = 'cz.alenkacz.gradle.jsonvalidator'
            displayName = 'Gradle Json Schema Validator'
        }
    }
}